//
//  File.swift
//  
//
//  Created by Benjamin Spratling on 10/15/22.
//

import Foundation


public struct CaseSpec {
	public var name:String
	public var associatedValueName:String
	public init(name: String, associatedValueName: String) {
		self.name = name
		self.associatedValueName = associatedValueName
	}
}


public struct EnumDecoderSpec {
	public var imports:[String]
	public var mainTypeName:String
	public var mainTypeIsPublic:Bool
	public var typePropertyName:String = "type"
	public var typeTypeName:String
	public var typeTypeIsPublic:Bool
	public var cases:[CaseSpec]
	public init(imports: [String], mainTypeName: String, mainTypeIsPublic: Bool, typePropertyName: String, typeTypeName: String, typeTypeIsPublic:Bool, cases: [CaseSpec]) {
		self.imports = imports
		self.mainTypeName = mainTypeName
		self.mainTypeIsPublic = mainTypeIsPublic
		self.typePropertyName = typePropertyName
		self.typeTypeName = typeTypeName
		self.typeTypeIsPublic = typeTypeIsPublic
		self.cases = cases
	}
}



public struct DefaultDecodableJSCreator {
	
	public init(_ spec:EnumDecoderSpec) {
		self.spec = spec
	}
	
	
	public var outputFile:String {
		var finalOutput:String = "//DO NOT EDIT\n//This file is auto-generated by the SwiftDecodableJSEnums Swift package plugin based on a .swiftJSEnum file\n\n"
		
		for importation in spec.imports {
			finalOutput += "import " + importation + "\n"
		}
		
		finalOutput += "extension " + spec.mainTypeName + " {\n"
		finalOutput += "\n\tprivate struct JSDecodableTypeContainer : Decodable {\n\t\tvar type:"
		+ spec.typeTypeName
		+ "\n\t}\n\n"
		+ "\tinit(from decoder:Decoder)throws {\n\t\tlet typer = try decoder.singleValueContainer().decode(JSDecodableTypeContainer.self)\n\t\tswitch typer.type {\n"
		
		for caseSpec in spec.cases {
			finalOutput += "\t\t\tcase ." + caseSpec.name + ":\n\t\t\t\tself = ." + caseSpec.name + "(try decoder.singleValueContainer().decode(" + caseSpec.associatedValueName + ".self))\n"
		}
		
		finalOutput += "\t\t}\n\t}\n\n"
		
		finalOutput += "\tvar " + spec.typePropertyName + ":" + spec.typeTypeName + " {\n\t\tswitch self {\n"
		
		for caseSpec in spec.cases {
			finalOutput += "\t\t\tcase ." + caseSpec.name + "(_):\n\t\t\t\treturn." + caseSpec.name + "\n"
		}
		
		finalOutput += "\t\t}\n\t}"
		
		finalOutput += "\n}"
		
		return finalOutput
		
		
//		return """
//import Foundation
//
//extension Transaction {
//	private struct JSDecodableTypeContainer : Decodable {
//		var type:TransactionType
//	}
//
//	init(from decoder:Decoder)throws {
//		let typer = try decoder.singleValueContainer().decode(JSDecodableTypeContainer.self)
//		switch typer.type {
//		case .add:
//			self = .add(try decoder.singleValueContainer().decode(NewTransaction.self))
//		case .update:
//			self = .update(try decoder.singleValueContainer().decode(TransactionChange.self))
//		case .delete:
//			self = .delete(try decoder.singleValueContainer().decode(TransactionDeletion.self))
//		}
//	}
//
//	var type:TransactionType {
//		switch self {
//			case .add(_):
//				return .add
//			case .update(_):
//				return .update
//			case .delete(_):
//				return .delete
//		}
//	}
//
//}
//
//"""
	}
	
	var spec:EnumDecoderSpec
	
}
